<?php

/**
 * Test class for S2AnA_DenyInterceptor.
 * Generated by PHPUnit2_Util_Skeleton on 2007-02-05 at 22:05:42.
 */
class S2AnA_DenyInterceptorTest extends PHPUnit2_Framework_TestCase
{
    private $_userRoleDenyObject = NULL;
    
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main()
    {
        $suite  = new PHPUnit2_Framework_TestSuite("S2AnA_DenyInterceptorTest");
        $result = PHPUnit2_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $container = S2ContainerFactory::create(APP_DICON);
        $this->_userRoleDenyObject = $container->getComponent('userRoleDeny');
        
        global $userPrincipal;
        $userPrincipal = NULL;
        global $authenticated;
        $authenticated = FALSE;
        global $inRoles;
        $inRoles = array();
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
        $this->_userRoleDenyObject = NULL;
        
        global $userPrincipal;
        $userPrincipal = NULL;
        global $authenticated;
        $authenticated = FALSE;
        global $inRoles;
        $inRoles = array();
    }
    
    public function testDenyRoleAccess()
    {
        global $inRoles;
        $inRoles = array('user');
        
        try {
            $this->_userRoleDenyObject->call();
            $this->fail();
        } catch(S2AnA_AccessDeniedException $ex) {
            $this->assertTrue(TRUE);
        } catch(Exception $ex) {
            $this->fail();
        }
    }
    
    public function testAllowRoleAccess()
    {
        global $inRoles;
        $inRoles = array('administrator');
        
        try {
            $this->_userRoleDenyObject->call();
            $this->assertTrue(TRUE);
        } catch(S2AnA_AccessDeniedException $ex) {
            $this->fail();
        } catch(Exception $ex) {
            $this->fail();
        }
    }
}

?>